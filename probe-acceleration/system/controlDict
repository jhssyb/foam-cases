FoamFile
{
    version     2.0;
    foamVersion 4.x;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}

application     icoFoam;

startFrom       startTime;
startTime       0;
stopAt          endTime;
endTime         0.5;

deltaT          0.005;

writeControl    timeStep;
writeInterval   20;
purgeWrite      0;
writeFormat     ascii;
writePrecision  6;
writeCompression off;

timeFormat      general;
timePrecision   6;

runTimeModifiable no;

functions
{
    acceleration
    {
        libs ("libutilityFunctionObjects.so");

        type            coded;
        name            calculateDDt;

        executeControl  timeStep;
        executeInterval 5;

        writeControl    writeTime;
        writeInterval   1;

        codeOptions
        #{
            -I$(LIB_SRC)/sampling/lnInclude
        #};

        codeLibs
        #{
            -lsampling
        #};

        codeInclude
        #{
            #include "probes.H"
        #};

        codeData
        #{
            autoPtr<probes> probes_;
            autoPtr<volVectorField> DDtU_;
            const volVectorField* UPtr_;
            const surfaceScalarField* phiPtr_;
        #};

        codeRead
        #{
        /*
            // Constructing probes dictionary
            List<word> fields;
            fields.append("DDt(U)");
            List<vector> locations;
            locations.append(vector(1e-3, 1e-3, 5e-3));

            dictionary conf;
            conf.add("fields", fields);
            conf.add("probeLocations", locations);
        */
        /*
            // Reading probes dictionary, let's assume it is
            // system/probesDict
            IOdictionary conf(
                IOobject("probesDict", time_.system(), mesh(),
                         IOobject::MUST_READ));
        */
            // Getting probes dictionary from system/controlDict's
            // probes sub-dictionary.
            const dictionary& conf(time_.controlDict().subDict("probes"));

            UPtr_ = &(mesh().lookupObject<volVectorField>("U"));
            phiPtr_ = &(mesh().lookupObject<surfaceScalarField>("phi"));

            // Initial acceleration field
            DDtU_.reset(
                new volVectorField(
                    IOobject("DDt(U)", time_.timeName(), mesh()),
                    mesh(),
                    dimensionedVector("0", dimVelocity/dimTime, Zero)));
            DDtU_->checkIn();
            DDtU_->write();

            probes_.reset(
                new probes(
                    "DDt(U)", mesh(), conf));
            // Probe and write for time = 0
            probes_->write();
        #};

        codeExecute
        #{
            // Write probes values
            DDtU_() = fvc::DDt(*phiPtr_, *UPtr_);
            probes_->write();
        #};

        codeWrite
        #{
            // Write
            DDtU_() = fvc::DDt(*phiPtr_, *UPtr_);
            DDtU_->write();
        #};

        codeEnd
        #{
            DDtU_() = fvc::DDt(*phiPtr_, *UPtr_);
            DDtU_->write();

            probes_->write();
        #};
    }
}

probes
{
    fields
    (
        DDt(U)
    );

    probeLocations
    (
        (1e-3 1e-3 5e-3)
    );
}

// ****************** vi: set ft=foam et sw=4 ts=4 sts=4: ****************** //
