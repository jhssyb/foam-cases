FoamFile
{
    version     2.0;
    foamVersion 4.x;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}

application     icoFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.5;

deltaT          0.005;

writeControl    timeStep;

writeInterval   20;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    acceleration
    {
        libs ("libutilityFunctionObjects.so");

        type            coded;
        name            calculateDDt;

        writeControl    writeTime;
        writeInterval   1;

        codeOptions
        #{
            -I$(LIB_SRC)/sampling/lnInclude
        #};

        codeLibs
        #{
            -lsampling
        #};

        codeInclude
        #{
            #include "probes.H"
        #};

        codeData
        #{
            autoPtr<probes> probes_;
        #};

        codeRead
        #{
            List<word> fields;
            fields.append("DDt(U)");
            List<vector> locations;
            // Locations to probe, could be refactored into reading dictionary
            // instead of constructing it by hand
            locations.append(vector(1e-3, 1e-3, 5e-3));

            dictionary conf;
            conf.add("fields", fields);
            conf.add("probeLocations", locations);

            // Initial acceleration field
            volVectorField t(
                IOobject("DDt(U)", time_.timeName(), mesh()),
                mesh(),
                dimensionedVector("0", dimVelocity/dimTime, Zero));
            t.write();

            probes_.reset(
                new probes(
                    "DDt(U)", time_, conf));
            // Probe and write for time = 0
            probes_->write();
        #};

        codeWrite
        #{
            // Lookup U and phi
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const surfaceScalarField& phi = mesh().lookupObject<surfaceScalarField>("phi");
            // Write
            volVectorField t("DDt(U)", fvc::DDt(phi, U));
            t.write();
            // Write probes values
            probes_->write();
        #};

        codeEnd
        #{
            // To have probed value at the last time step
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const surfaceScalarField& phi = mesh().lookupObject<surfaceScalarField>("phi");
            volVectorField t("DDt(U)", fvc::DDt(phi, U));
            t.write();
            probes_->write();
        #};
    }
}

// vi: set ft=foam et sw=4 ts=4:
